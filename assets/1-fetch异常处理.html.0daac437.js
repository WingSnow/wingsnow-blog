import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o,c,b as n,d as t,e as s,a as p,r as i}from"./app.b12f069c.js";const l={},u=n("h1",{id:"fetch-\u5F02\u5E38\u5904\u7406",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#fetch-\u5F02\u5E38\u5904\u7406","aria-hidden":"true"},"#"),s(" fetch \u5F02\u5E38\u5904\u7406")],-1),r={class:"custom-container tip"},k=n("p",{class:"custom-container-title"},"\u53C2\u8003\u8D44\u6599\uFF1A",-1),d={href:"https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html",target:"_blank",rel:"noopener noreferrer"},v=s("Fetch API \u6559\u7A0B - \u962E\u4E00\u5CF0\u7684\u7F51\u7EDC\u65E5\u5FD7 (ruanyifeng.com)"),m={href:"https://blog.csdn.net/qq_39207948/article/details/85050687",target:"_blank",rel:"noopener noreferrer"},b=s("Fetch\u7684\u6570\u636E\u83B7\u53D6\u548C\u53D1\u9001\u4EE5\u53CA\u5F02\u5E38\u5904\u7406 - CSDN"),y=p(`<h2 id="\u670D\u52A1\u5668\u8FD4\u56DE\u9519\u8BEF" tabindex="-1"><a class="header-anchor" href="#\u670D\u52A1\u5668\u8FD4\u56DE\u9519\u8BEF" aria-hidden="true">#</a> \u670D\u52A1\u5668\u8FD4\u56DE\u9519\u8BEF</h2><p><code>fetch()</code>\u53D1\u51FA\u8BF7\u6C42\u4EE5\u540E\uFF0C\u6709\u4E00\u4E2A\u5F88\u91CD\u8981\u7684\u6CE8\u610F\u70B9\uFF1A\u53EA\u6709\u7F51\u7EDC\u9519\u8BEF\uFF0C\u6216\u8005\u65E0\u6CD5\u8FDE\u63A5\u65F6\uFF0C<code>fetch()</code>\u624D\u4F1A\u62A5\u9519\uFF0C\u5176\u4ED6\u60C5\u51B5\u90FD\u4E0D\u4F1A\u62A5\u9519\uFF0C\u800C\u662F\u8BA4\u4E3A\u8BF7\u6C42\u6210\u529F\u3002</p><p>\u8FD9\u5C31\u662F\u8BF4\uFF0C\u5373\u4F7F\u670D\u52A1\u5668\u8FD4\u56DE\u7684\u72B6\u6001\u7801\u662F<code>4xx</code>\u6216<code>5xx</code>\uFF0C<code>fetch()</code>\u4E5F\u4E0D\u4F1A\u62A5\u9519\uFF08\u5373<code>Promise</code>\u4E0D\u4F1A\u53D8\u4E3A<code>rejected</code>\u72B6\u6001\uFF09\u3002</p><p>\u53EF\u4EE5\u901A\u8FC7<code>response.status</code>\u5C5E\u6027\uFF0C\u5F97\u5230 HTTP \u56DE\u5E94\u7684\u771F\u5B9E\u72B6\u6001\u7801\uFF0C\u5224\u65AD\u8BF7\u6C42\u662F\u5426\u6210\u529F\uFF1B\u6216\u8005\u5224\u65AD<code>response.ok</code>\u662F\u5426\u4E3A true \uFF08<code>response.status</code>\u5728 200-299 \u7684\u8303\u56F4\u5185\u65F6\uFF0C<code>response.ok</code>\u4E3A true\uFF09\u3002\u793A\u4F8B\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">fetchText</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;/readme.txt&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u629B\u51FA\u5F02\u5E38" tabindex="-1"><a class="header-anchor" href="#\u629B\u51FA\u5F02\u5E38" aria-hidden="true">#</a> \u629B\u51FA\u5F02\u5E38</h3><p>\u4E00\u65E6\u6211\u4EEC\u77E5\u9053\u8BF7\u6C42\u662F\u4E0D\u6210\u529F\u7684\uFF0C\u53EF\u4EE5<code>throw</code>\u5F02\u5E38\u6216\u8005<code>Promise.reject</code>\u6765\u62A5\u9519\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// throw an Error</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// reject a Promise</span>
<span class="token keyword">else</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u63D0\u793A</p><p><code>fetch</code>\u4F7F\u7528 Promise\uFF0C\u6240\u4EE5\u8FD9\u91CC\u9009\u62E9<code>Promise.reject()</code></p></div><p>\u73B0\u5728\u5982\u679C\u670D\u52A1\u5668\u8FD4\u56DE\u5F02\u5E38\uFF0C\u9519\u8BEF\u5C31\u4F1A\u8FDB\u5165 catch \u8BED\u53E5\uFF0C\u5E76\u4E14\u6211\u4EEC\u53EF\u4EE5 reject \u4E00\u4E2A\u5BF9\u8C61\u6765\u89E3\u91CA\u5F02\u5E38\u7684\u539F\u56E0\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
        <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            status<span class="token operator">:</span> response<span class="token punctuation">.</span>status<span class="token punctuation">,</span>
            statusText<span class="token operator">:</span> response<span class="token punctuation">.</span>statusText
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),h={class:"custom-container details"},f=n("summary",null,"\u4F7F\u7528Error\u4F5C\u4E3APromise.reject()\u7684\u53C2\u6570",-1),w=s("\u6839\u636Eeslint\u7684"),g=n("code",null,"prefer-promise-reject-errors",-1),_=s("\u89C4\u5219["),x={href:"https://eslint.org/docs/rules/prefer-promise-reject-errors",target:"_blank",rel:"noopener noreferrer"},j=s("\u6587\u6863"),P=s("]\uFF0C\u5F53\u6211\u4EEC\u4F7F\u7528"),T=n("code",null,"Promise.reject()",-1),R=s("\u65F6\uFF0C\u6700\u597D\u53EA\u5C06\u5185\u7F6E\u7684"),q=n("code",null,"Error",-1),I=s("\u5B9E\u4F8B\u4F5C\u4E3A\u53C2\u6570\uFF08\u800C\u4E0D\u662F\u76F4\u63A5\u4F7F\u7528\u503C\u6216\u8005\u5BF9\u8C61\uFF09\u3002"),O=n("code",null,"Error",-1),N=s("\u81EA\u52A8\u5B58\u50A8\u5806\u6808\u8DDF\u8E2A\uFF0C\u53EF\u4EE5\u901A\u8FC7\u786E\u5B9A\u9519\u8BEF\u7684\u6765\u6E90\u6765\u8C03\u8BD5\u9519\u8BEF\u3002\u5982\u679C\u4F7F\u7528\u975E"),S=n("code",null,"Error",-1),E=s("\u503C\u5219\u5F88\u96BE\u786E\u5B9A\u62D2\u7EDD\u53D1\u751F\u7684\u4F4D\u7F6E\u3002"),J=p(`<p>\u4F46\u662F\u5728\u67D0\u4E9B\u60C5\u51B5\u4E0B\u670D\u52A1\u5668\u4F1A\u8FD4\u56DE\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u8BF4\u660E\u9020\u6210\u9519\u8BEF\u8BF7\u6C42\u7684\u5177\u4F53\u539F\u56E0\u3002\u4F8B\u5982\u5982\u679C\u8BF7\u6C42\u7F3A\u5C11\u53C2\u6570\uFF0C\u670D\u52A1\u5668\u8FD4\u56DE400\uFF0C\u5E76\u4E14\u5728<code>response.body</code>\u4E2D\u8BF4\u660E\u7F3A\u5C11\u4EC0\u4E48\u53C2\u6570\u3002</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  err<span class="token operator">:</span> &#39;no first name&#39;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u65F6\u5019\u9519\u8BEF\u5BF9\u8C61\u9700\u6C42<code>response.json</code>\u6765\u89E3\u6790\u3002</p><p>\u89E3\u51B3\u7684\u65B9\u6CD5\u662F\u9996\u5148\u901A\u8FC7<code>response.json</code>\u8BFB\u53D6\uFF0C\u7136\u540E\u51B3\u5B9A\u600E\u4E48\u5904\u7406\u3002</p><div class="custom-container warning"><p class="custom-container-title">\u6CE8\u610F</p><p>\u5982\u679C\u670D\u52A1\u5668\u8FD4\u56DE\u6210\u529F\uFF0C<code>response.json</code>\u8BFB\u53D6\u5230\u7684\u5C31\u662F\u8BF7\u6C42\u7684\u5185\u5BB9\uFF08\u5BF9\u4E8E\u54CD\u5E94<code>json</code>\u683C\u5F0F\u5185\u5BB9\u7684\u63A5\u53E3\uFF09\uFF1B</p><p>\u5982\u679C\u670D\u52A1\u5668\u8FD4\u56DE\u9519\u8BEF\uFF0C\u4F46\u662F\u4E0D\u9700\u8981\u5177\u4F53\u89E3\u91CA\uFF08<code>response.body</code>\u4E3A\u7A7A\uFF09\u6216\u8005\u670D\u52A1\u5668\u5F02\u5E38\u8FD4\u56DE\u4E86<code>body</code>\u4E0D\u662F<code>json</code>\u683C\u5F0F\u7684\u5185\u5BB9\uFF0C<code>response.json</code>\u4F1A\u62A5\u9519\u3002\u53EF\u4EE5\u901A\u8FC7\u54CD\u5E94\u5934\u7684<code>Content-type</code>\u662F\u5426\u4E3A<code>application/json</code>\u6765\u5224\u65AD\u662F\u5426\u8981\u89E3\u91CA\u3002</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleResponse</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> contentType <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> body<span class="token operator">:</span> <span class="token builtin">any</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    body <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> body
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      status<span class="token operator">:</span> response<span class="token punctuation">.</span>status<span class="token punctuation">,</span>
      statusText<span class="token operator">:</span> response<span class="token punctuation">.</span>statusText<span class="token punctuation">,</span>
      <span class="token operator">...</span>body<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchJson</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u5176\u4ED6\u683C\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u5176\u4ED6\u683C\u5F0F" aria-hidden="true">#</a> \u5176\u4ED6\u683C\u5F0F</h3><p>\u4F46\u662F\u73B0\u5728\u6211\u4EEC\u53EA\u80FD\u5904\u7406 json \u683C\u5F0F\u7684\u54CD\u5E94\uFF0C\u800C90%\u7684\u670D\u52A1\u5668\u90FD\u4F1A\u8FD4\u56DE json \u683C\u5F0F\u7684\u6570\u636E\uFF0C\u81F3\u4E8E\u5176\u4ED6\u768410%\u5462\uFF1F</p>`,8),C=s("\u6839\u636E"),B={href:"https://www.programmableweb.com/news/most-popular-apis-least-one-will-surprise-you/2014/01/23",target:"_blank",rel:"noopener noreferrer"},$=s("\u53EF\u7F16\u7A0B\u7F51\u7EDC(Programmable Web)"),A=s("\u7684\u6570\u636E\uFF0C\u6700\u6D41\u884C\u768410\u4E2A api \u4E2D\u53EA\u6709\u4E00\u4E2A\u662F\u4EC5\u63D0\u4F9B xml \u4E14\u4E0D\u652F\u6301 json \u7684\u3002\u5176\u4ED6\u7684\u8981\u4E48\u540C\u65F6\u652F\u6301 xml \u548C json\uFF0C\u8981\u4E48\u53EA\u652F\u6301 json \u3002"),F=p(`<p>\u89E3\u6790 xml \u683C\u5F0F\uFF08\u6216\u8005\u7EAF\u6587\u672C text/plain \u683C\u5F0F\uFF09\u7684\u6570\u636E\u65F6\u6211\u4EEC\u9700\u8981<code>response.text</code>\u3002\u4E0E\u4E0A\u9762\u4E00\u6837\uFF0C\u6211\u4EEC\u53EF\u4EE5\u901A\u8FC7\u54CD\u5E94\u5934\u6765\u51B3\u5B9A\u5185\u5BB9\u89E3\u6790\u7684\u65B9\u5F0F\u3002 \u73B0\u5728\u5904\u7406\u4EE3\u7801\u5982\u4E0B\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleJSONResponse</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> json
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
      <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        status<span class="token operator">:</span> response<span class="token punctuation">.</span>status<span class="token punctuation">,</span>
        statusText<span class="token operator">:</span> response<span class="token punctuation">.</span>statusText<span class="token punctuation">,</span>
        <span class="token operator">...</span>json<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleTextResponse</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> text
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
      <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        status<span class="token operator">:</span> response<span class="token punctuation">.</span>status<span class="token punctuation">,</span>
        statusText<span class="token operator">:</span> response<span class="token punctuation">.</span>statusText<span class="token punctuation">,</span>
        err<span class="token operator">:</span> text<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleResponse</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> contentType <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">handleJSONResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    contentType<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;text/html&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    contentType<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">handleTextResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Content-type </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>contentType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not supported</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">fetchPlus</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u7F51\u7EDC\u9519\u8BEF" tabindex="-1"><a class="header-anchor" href="#\u7F51\u7EDC\u9519\u8BEF" aria-hidden="true">#</a> \u7F51\u7EDC\u9519\u8BEF</h2><p>\u4E0A\u9762\u662F\u9488\u5BF9<code>fetch()</code>\u8BF7\u6C42\u6210\u529F\uFF0C\u53EA\u662F\u670D\u52A1\u5668\u8FD4\u56DE\u9519\u8BEF\u7684\u9519\u8BEF\uFF1B\u4F46\u662F\u5982\u679C\u7F51\u7EDC\u8FDE\u63A5\u9519\u8BEF\u5BFC\u81F4<code>fetch()</code>\u8BF7\u6C42\u5931\u8D25\u5462\uFF1F \u6B64\u65F6<code>fetch()</code>\u672C\u8EAB\u4F1A\u629B\u51FA\u5F02\u5E38\uFF0C\u5728\u4E0A\u9762\u7684\u4EE3\u7801\u4E2D\uFF0C\u4F1A\u6355\u83B7\u5230<code>TypeError: Failed to fetch</code>\u7684\u5F02\u5E38\u3002</p><p>\u5BF9\u4E8E\u670D\u52A1\u5668\u8FD4\u56DE\u7684\u9519\u8BEF\uFF08\u6216\u8005\u7F51\u7EDC\u9519\u8BEF\uFF09\u5982\u4F55\u5904\u7406\u5E76\u5448\u73B0\u7ED9\u7EC8\u7AEF\u7528\u6237\uFF0C\u5219\u8981\u6839\u636E\u4E1A\u52A1\u9700\u6C42\u5728\u8C03\u7528\u65B9\u6CD5\u4E2D\u6839\u636E\u4E0E\u670D\u52A1\u5668\u7EA6\u5B9A\u7684\u9519\u8BEF\u7801\u6765\u8F6C\u6362\u4E86\u3002</p><h2 id="\u8D85\u65F6\u5904\u7406" tabindex="-1"><a class="header-anchor" href="#\u8D85\u65F6\u5904\u7406" aria-hidden="true">#</a> \u8D85\u65F6\u5904\u7406</h2><p>fetch\u4E0D\u652F\u6301\u8D85\u65F6timeout\u5904\u7406\uFF0C\u53EA\u80FD\u81EA\u5DF1\u5C01\u88C5\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">RequestInitWithTimeOut</span> <span class="token operator">=</span> RequestInit <span class="token operator">&amp;</span> <span class="token punctuation">{</span> timeout<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">fetchPlus</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> RequestInfo<span class="token punctuation">,</span> init<span class="token operator">?</span><span class="token operator">:</span> RequestInitWithTimeOut<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fetchPromise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> init<span class="token punctuation">)</span>
  <span class="token keyword">let</span> response<span class="token operator">:</span> Response
  <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token operator">?.</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> timeoutPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;fetch timeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> init<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fetchPromise<span class="token punctuation">,</span> timeoutPromise<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> fetchPromise
  <span class="token punctuation">}</span>
  <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6838\u5FC3\u601D\u8DEF\u662F\u4F7F\u7528<code>Promise.race</code>\u65B9\u6CD5\uFF0C\u5176\u63A5\u53D7\u4E00\u4E2A<code>promise</code>\u5B9E\u4F8B\u6570\u7EC4\uFF0C\u8868\u793A\u591A\u4E2A<code>promise</code>\u5B9E\u4F8B\u4E2D\u4EFB\u4F55\u4E00\u4E2A\u6700\u5148\u6539\u53D8\u72B6\u6001\uFF0C\u90A3\u4E48<code>race</code>\u65B9\u6CD5\u8FD4\u56DE\u7684<code>promise</code>\u5B9E\u4F8B\u72B6\u6001\u5C31\u8DDF\u7740\u6539\u53D8\u3002\u6211\u4EEC\u6784\u5EFA\u4E86\u4E00\u4E2A\u5728<code>timeout</code>\u65F6\u95F4\u540E\u5C31\u4F1A\u81EA\u52A8<code>reject</code>\u7684<code>timeoutPromise</code>\uFF0C\u5982\u679C\u8BF7\u6C42<code>fetchPromise</code>\u5728<code>timeout</code>\u65F6\u4ECD\u672A\u54CD\u5E94\uFF0C\u90A3<code>response</code>\u5C31\u4F1A\u63A5\u53D7<code>timeoutPromise</code>\u7684<code>reject</code>\uFF0C\u5E76\u629B\u51FA\u5F02\u5E38\u3002</p><div class="custom-container warning"><p class="custom-container-title">\u6CE8\u610F</p><p>\u9700\u8981\u6CE8\u610F\u7684\u662F\u5728\u4E0A\u8FF0\u5B9E\u73B0\u65B9\u5F0F\u4E2D\uFF1A</p><ul><li>timeout\u4E0D\u662F\u8BF7\u6C42\u8FDE\u63A5\u8D85\u65F6\u7684\u542B\u4E49\uFF0C\u5B83\u8868\u793A\u8BF7\u6C42\u7684response\u65F6\u95F4\uFF0C\u5305\u62EC\u8BF7\u6C42\u7684\u8FDE\u63A5\u3001\u670D\u52A1\u5668\u5904\u7406\u53CA\u670D\u52A1\u5668\u54CD\u5E94\u56DE\u6765\u7684\u65F6\u95F4\uFF1B</li><li>fetch\u7684timeout\u5373\u4F7F\u8D85\u65F6\u53D1\u751F\u4E86\uFF0C\u672C\u6B21\u8BF7\u6C42\u4E5F\u4E0D\u4F1A\u88ABabort\u4E22\u5F03\u6389\uFF0C\u5B83\u5728\u540E\u53F0\u4ECD\u7136\u4F1A\u53D1\u9001\u5230\u670D\u52A1\u5668\u7AEF\uFF0C\u53EA\u662F\u672C\u6B21\u8BF7\u6C42\u7684\u54CD\u5E94\u5185\u5BB9\u88AB\u4E22\u5F03\u800C\u5DF2\u3002</li></ul></div><h2 id="\u53D1\u9001-json-\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#\u53D1\u9001-json-\u6570\u636E" aria-hidden="true">#</a> \u53D1\u9001 JSON \u6570\u636E</h2><p>\u5F53\u4F7F\u7528\u539F\u751F\u7684<code>fetch</code>\u6765\u53D1\u9001 JSON \u6570\u636E\u65F6\uFF0C\u6211\u4EEC\u9700\u8981\u8FD9\u4E48\u505A\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token punctuation">{</span> some<span class="token operator">:</span> <span class="token string">&#39;content&#39;</span> <span class="token punctuation">}</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;some-url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u63D0\u5230\uFF0C\u5927\u90E8\u5206\u7684\u6D41\u884C\u63A5\u53E3\u90FD\u91C7\u7528 json \u683C\u5F0F\u7684\u54CD\u5E94\uFF0C\u540C\u65F6\u4E5F\u63A5\u53D7 json \u683C\u5F0F\u7684\u8BF7\u6C42\u3002</p><p>\u4E3A\u4E86\u7B80\u5316\u4F7F\u7528\uFF0C\u53EF\u4EE5\u5C06\u4EE5\u4E0A\u884C\u4E3A\u8FDB\u884C\u5C01\u88C5\u3002\u9664\u975E\u5728 headers \u4E2D\u8BBE\u7F6E\u4E86\u5176\u4ED6\u7C7B\u578B\u7684<code>content-type</code> \uFF0C\u5426\u5219\u90FD\u8BBE\u7F6E<code>content-type</code>\u4E3A<code>application/json</code>\uFF0C\u5E76\u4F7F\u7528<code>JSON.stringify()</code>\u5C06body\u8F6C\u6362\u4E3Ajson\u5B57\u7B26\u4E32\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">RequestInitPlus</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>RequestInit<span class="token punctuation">,</span> <span class="token string">&#39;body&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  body<span class="token operator">?</span><span class="token operator">:</span> RequestInit<span class="token punctuation">[</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">]</span> <span class="token operator">|</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span>
  timeout<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">fetchPlus</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> RequestInfo<span class="token punctuation">,</span> init<span class="token operator">?</span><span class="token operator">:</span> RequestInitPlus<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8BBE\u7F6E content-type</span>
  <span class="token class-name"><span class="token keyword">const</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span>init<span class="token operator">?.</span>headers<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headers<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> requestInit <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>init<span class="token punctuation">,</span>
    headers<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u5982\u679C\u539Fheaders\u6CA1\u6709\u8BBE\u7F6Econtent-type\u4E3A&#39;application/json&#39;\u4EE5\u5916\u7684\u503C\uFF0C</span>
  <span class="token comment">// \u5219\u5C06body\u8F6C\u6362\u4E3AJSON\u5B57\u7B26\u4E32</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    requestInit<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>init<span class="token operator">?.</span>body<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u8D85\u65F6\u5904\u7406</span>
  <span class="token keyword">const</span> fetchPromise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> requestInit <span class="token keyword">as</span> RequestInit<span class="token punctuation">)</span>
  <span class="token keyword">let</span> response<span class="token operator">:</span> Response
  <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token operator">?.</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> timeoutPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;fetch timeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> init<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fetchPromise<span class="token punctuation">,</span> timeoutPromise<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> fetchPromise
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u73B0\u5728\uFF0C\u53EF\u4EE5\u8FD9\u6837\u53D1\u9001JSON\u6570\u636E</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token punctuation">{</span> some<span class="token operator">:</span> <span class="token string">&#39;content&#39;</span> <span class="token punctuation">}</span>

<span class="token function">fetchPlus</span><span class="token punctuation">(</span><span class="token string">&#39;some-url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  body<span class="token operator">:</span> content<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u5982\u679C\u8981\u53D1\u9001\u975EJSON\u683C\u5F0F\u7684\u6570\u636E\uFF0C\u5219\u8981\u8FD9\u6837\u53D1\u9001</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token string">&#39;content&#39;</span>

<span class="token function">fetchPlus</span><span class="token punctuation">(</span><span class="token string">&#39;some-url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>
  headers<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;text/plain&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  body<span class="token operator">:</span> content<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="bearer-token" tabindex="-1"><a class="header-anchor" href="#bearer-token" aria-hidden="true">#</a> Bearer Token</h2><p>\u901A\u5E38\uFF0C\u5F53\u9700\u8981\u5904\u7406\u8EAB\u4EFD\u8BA4\u8BC1\u65F6\uFF0C\u5927\u90E8\u5206\u63A5\u53E3\u8981\u6C42\u8FD9\u6837\u505A\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;some-url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  headers<span class="token operator">:</span> <span class="token punctuation">{</span> Authorization<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u540C\u6837\u8FDB\u884C\u5C01\u88C5\u4EE5\u65B9\u4FBF\u4F7F\u7528</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">fetchPlus</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> RequestInfo<span class="token punctuation">,</span> init<span class="token operator">?</span><span class="token operator">:</span> RequestInitPlus<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8BBE\u7F6E content-type</span>
  <span class="token class-name"><span class="token keyword">const</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span>init<span class="token operator">?.</span>headers<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headers<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token operator">?.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Authorization&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>init<span class="token punctuation">.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> requestInit <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>init<span class="token punctuation">,</span>
    headers<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u5982\u679C\u539Fheaders\u6CA1\u6709\u8BBE\u7F6Econtent-type\u4E3A&#39;application/json&#39;\u4EE5\u5916\u7684\u503C\uFF0C</span>
  <span class="token comment">// \u5219\u5C06body\u8F6C\u6362\u4E3AJSON\u5B57\u7B26\u4E32</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    requestInit<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>init<span class="token operator">?.</span>body<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u8D85\u65F6\u5904\u7406</span>
  <span class="token keyword">const</span> fetchPromise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> requestInit <span class="token keyword">as</span> RequestInit<span class="token punctuation">)</span>
  <span class="token keyword">let</span> response<span class="token operator">:</span> Response
  <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token operator">?.</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> timeoutPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;fetch timeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> init<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fetchPromise<span class="token punctuation">,</span> timeoutPromise<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> fetchPromise
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8FD9\u6837\u5C31\u53EF\u4EE5\u6309\u4EE5\u4E0B\u65B9\u5F0F\u8BBE\u7F6Etoken</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> token <span class="token operator">=</span> <span class="token string">&#39;your token&#39;</span>

<span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;some-url&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> token <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u5B8C\u6574\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u5B8C\u6574\u4EE3\u7801" aria-hidden="true">#</a> \u5B8C\u6574\u4EE3\u7801</h2><p>\u73B0\u5728\u6211\u4EEC\u6709\u4E86\u4E00\u4E2A\u5BF9<code>fetch</code>\u7684\u5C01\u88C5\uFF0C\u652F\u6301timeout\uFF0C\u53D1\u9001JSON\u6570\u636E\uFF0CBearer Token\uFF0C\u5E76\u81EA\u52A8\u89E3\u6790\u54CD\u5E94\u6570\u636E\u548C\u9519\u8BEF\u3002</p><details class="custom-container details"><summary>\u5B8C\u6574\u4EE3\u7801</summary><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">handleJSONResponse</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> json <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> json
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
      <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        status<span class="token operator">:</span> response<span class="token punctuation">.</span>status<span class="token punctuation">,</span>
        statusText<span class="token operator">:</span> response<span class="token punctuation">.</span>statusText<span class="token punctuation">,</span>
        <span class="token operator">...</span>json<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleTextResponse</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> text
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
      <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        status<span class="token operator">:</span> response<span class="token punctuation">.</span>status<span class="token punctuation">,</span>
        statusText<span class="token operator">:</span> response<span class="token punctuation">.</span>statusText<span class="token punctuation">,</span>
        err<span class="token operator">:</span> text<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">handleResponse</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> contentType <span class="token operator">=</span> response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">handleJSONResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    contentType<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;text/html&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span>
    contentType<span class="token operator">?.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">handleTextResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Content-type </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>contentType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> not supported</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> <span class="token class-name">RequestInitPlus</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>RequestInit<span class="token punctuation">,</span> <span class="token string">&#39;body&#39;</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span>
  body<span class="token operator">?</span><span class="token operator">:</span> RequestInit<span class="token punctuation">[</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">]</span> <span class="token operator">|</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span>
  timeout<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
  token<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">fetchPlus</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>input<span class="token operator">:</span> RequestInfo<span class="token punctuation">,</span> init<span class="token operator">?</span><span class="token operator">:</span> RequestInitPlus<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8BBE\u7F6E content-type</span>
  <span class="token class-name"><span class="token keyword">const</span></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span>init<span class="token operator">?.</span>headers<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headers<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token operator">?.</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;Authorization&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>init<span class="token punctuation">.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> requestInit <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>init<span class="token punctuation">,</span>
    headers<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u5982\u679C\u539Fheaders\u6CA1\u6709\u8BBE\u7F6Econtent-type\u4E3A&#39;application/json&#39;\u4EE5\u5916\u7684\u503C\uFF0C</span>
  <span class="token comment">// \u5219\u5C06body\u8F6C\u6362\u4E3AJSON\u5B57\u7B26\u4E32</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>headers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    requestInit<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>init<span class="token operator">?.</span>body<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// \u8D85\u65F6\u5904\u7406</span>
  <span class="token keyword">const</span> fetchPromise <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> requestInit <span class="token keyword">as</span> RequestInit<span class="token punctuation">)</span>
  <span class="token keyword">let</span> response<span class="token operator">:</span> Response
  <span class="token keyword">if</span> <span class="token punctuation">(</span>init<span class="token operator">?.</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> timeoutPromise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;fetch timeout&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> init<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>fetchPromise<span class="token punctuation">,</span> timeoutPromise<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> fetchPromise
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token function">handleResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> fetchPlus
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,30);function H(V,z){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("div",r,[k,n("p",null,[n("a",d,[v,t(a)])]),n("p",null,[n("a",m,[b,t(a)])])]),y,n("details",h,[f,n("p",null,[w,g,_,n("a",x,[j,t(a)]),P,T,R,q,I,O,N,S,E])]),J,n("blockquote",null,[n("p",null,[C,n("a",B,[$,t(a)]),A])]),F])}var D=e(l,[["render",H],["__file","1-fetch\u5F02\u5E38\u5904\u7406.html.vue"]]);export{D as default};
